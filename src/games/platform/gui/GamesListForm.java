package games.platform.gui;

import games.platform.connection.DataBase;
import games.platform.crud.gui.GameForm;
import games.platform.dbModels.Games;
import games.platform.dbModels.ResultSetTableModel;
import games.platform.logger.AppLogger;
import games.platform.models.Game;
import games.platform.utils.DbGlobal;
import games.platform.utils.LoggerGlobal;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JDesktopPane;

public class GamesListForm extends javax.swing.JInternalFrame {

    static private ResultSetTableModel tableModel;
    private JDesktopPane mainPanel;

    public GamesListForm(JDesktopPane mainPanel) {
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        this.mainPanel = mainPanel;
        try {
            DataBase db = DbGlobal.getDb();
            tableModel = new ResultSetTableModel(db.getConnection());
            initComponents();
            tableModel.setQuery(Games.getGames());
            table.createDefaultColumnsFromModel();
        } catch (IllegalStateException | SQLException | ClassNotFoundException e) {
            LoggerGlobal.getLogger().addLog(AppLogger.getSevereLevel(), "Erro ao conectar o Banco de Dados. " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        removeGameButton = new javax.swing.JButton();
        editGameButton = new javax.swing.JButton();

        setBorder(null);
        setMaximizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(850, 509));

        jLabel3.setText("Lista de Jogos dispon√≠veis");

        table.setAutoCreateColumnsFromModel(false);
        table.setModel(tableModel);
        table.setName(""); // NOI18N
        jScrollPane1.setViewportView(table);

        removeGameButton.setText("Remover");
        removeGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeGameButtonActionPerformed(evt);
            }
        });

        editGameButton.setText("Editar");
        editGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editGameButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editGameButton)
                        .addComponent(removeGameButton))
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Game getGameBySelectedRow(int row) {
        int gameSelectedId = (int) table.getValueAt(row, 0);
        String gameSelectedName = (String) table.getValueAt(row, 1);
        String gameSelectedDescription = (String) table.getValueAt(row, 2);
        Date gameSelectedReleaseDate = (Date) table.getValueAt(row, 3);
        float gameSelectedPrice = (float) table.getValueAt(row, 4);
        int gameSelectedPublisherId = (int) table.getValueAt(row, 5);
        String gameSelectedPublisherName = (String) table.getValueAt(row, 6);
        return new Game(gameSelectedId, gameSelectedName, gameSelectedDescription, gameSelectedReleaseDate, gameSelectedPrice, gameSelectedPublisherId, gameSelectedPublisherName);
    }

    private void removeGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeGameButtonActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            Game gameToRemove = getGameBySelectedRow(selectedRow);
            games.platform.dbModels.Games.updateRemovedGames(gameToRemove, DbGlobal.getDb().getConnection());
            games.platform.crud.models.Game.removeGame(gameToRemove, DbGlobal.getDb().getConnection());
            try {
                tableModel.setQuery(Games.getGames());
            } catch (SQLException | IllegalStateException ex) {
                LoggerGlobal.getLogger().addLog(AppLogger.getSevereLevel(), "Erro ao conectar o Banco de Dados. " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_removeGameButtonActionPerformed

    private void editGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGameButtonActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            GameForm gameUpdateForm = new GameForm(getGameBySelectedRow(selectedRow), false);
            mainPanel.add(gameUpdateForm);
            mainPanel.setVisible(true);
            gameUpdateForm.setVisible(true);
        }
    }//GEN-LAST:event_editGameButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editGameButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeGameButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
